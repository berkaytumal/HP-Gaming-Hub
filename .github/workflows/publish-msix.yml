name: Publish MSIX Package

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

permissions:
  contents: write
  actions: read
  pull-requests: write
  issues: write
  repository-projects: write

jobs:
  build-and-publish:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Get version from tag or input
      id: get_version
      shell: pwsh
      run: |
        if ("${{ github.event_name }}" -eq "push") {
          $version = "${{ github.ref_name }}" -replace '^v', ''
        } else {
          $version = "${{ github.event.inputs.version }}"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
        
    - name: Update version in project file
      shell: pwsh
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $projectFile = "HP Gaming Hub.csproj"
        $content = Get-Content $projectFile -Raw
        $content = $content -replace '<Version>.*</Version>', "<Version>$version</Version>"
        $content = $content -replace '<ApplicationVersion>.*</ApplicationVersion>', "<ApplicationVersion>$version</ApplicationVersion>"
        Set-Content $projectFile $content
        
    - name: Setup certificate from secrets
      shell: pwsh
      run: |
        $certBytes = [System.Convert]::FromBase64String("${{ secrets.CERTIFICATE_BASE64 }}")
        [System.IO.File]::WriteAllBytes("HPGamingHub.pfx", $certBytes)
        echo "Certificate decoded and saved to HPGamingHub.pfx"
        
    - name: Validate certificate
      shell: pwsh
      run: |
        # Check if certificate file exists and is valid
        if (-not (Test-Path "HPGamingHub.pfx")) {
          echo "ERROR: Certificate file not found"
          exit 1
        }
        
        # Test certificate password and validity
        try {
          $password = ConvertTo-SecureString -String "${{ secrets.CERTIFICATE_PASSWORD }}" -Force -AsPlainText
          $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2("HPGamingHub.pfx", $password)
          
          echo "Certificate Subject: $($cert.Subject)"
          echo "Certificate Issuer: $($cert.Issuer)"
          echo "Certificate Valid From: $($cert.NotBefore)"
          echo "Certificate Valid To: $($cert.NotAfter)"
          echo "Certificate Thumbprint: $($cert.Thumbprint)"
          
          # Check if certificate is expired
          $now = Get-Date
          if ($cert.NotAfter -lt $now) {
            echo "ERROR: Certificate has expired on $($cert.NotAfter)"
            exit 1
          }
          
          if ($cert.NotBefore -gt $now) {
            echo "ERROR: Certificate is not yet valid (valid from $($cert.NotBefore))"
            exit 1
          }
          
          # Check if certificate has a private key
          if (-not $cert.HasPrivateKey) {
            echo "ERROR: Certificate does not contain a private key"
            exit 1
          }
          
          echo "âœ… Certificate validation successful - ready for code signing"
        }
        catch {
          echo "ERROR: Failed to load certificate - $($_.Exception.Message)"
          echo "This usually indicates an incorrect password or corrupted certificate file"
          exit 1
        }
        
    - name: Import certificate to store
      shell: pwsh
      run: |
        # Import certificate to certificate store for signing
        $password = ConvertTo-SecureString -String "${{ secrets.CERTIFICATE_PASSWORD }}" -Force -AsPlainText
        Import-PfxCertificate -FilePath "HPGamingHub.pfx" -CertStoreLocation "Cert:\CurrentUser\My" -Password $password
        echo "Certificate imported to certificate store"
        
    - name: Restore dependencies
      run: dotnet restore "HP Gaming Hub.csproj"
        
    - name: Build and package MSIX
      run: |
        msbuild "HP Gaming Hub.csproj" /p:Configuration=Release /p:Platform=x64 /p:UapAppxPackageBuildMode=StoreUpload /p:AppxBundlePlatforms=x64 /p:PackageCertificateKeyFile="HPGamingHub.pfx" /p:PackageCertificatePassword="${{ secrets.CERTIFICATE_PASSWORD }}" /p:GenerateAppxPackageOnBuild=true /p:PublishReadyToRun=false
        
    - name: Find MSIX package
      id: find_msix
      shell: pwsh
      run: |
        $msixPath = Get-ChildItem -Path "AppPackages" -Filter "*.msix" -Recurse | Select-Object -First 1 -ExpandProperty FullName
        if (-not $msixPath) {
          $msixPath = Get-ChildItem -Path "bin\x64\Release" -Filter "*.msix" -Recurse | Select-Object -First 1 -ExpandProperty FullName
        }
        if ($msixPath) {
          echo "msix_path=$msixPath" >> $env:GITHUB_OUTPUT
          echo "Found MSIX: $msixPath"
        } else {
          echo "No MSIX package found"
          exit 1
        }
        
    - name: Create Release and Upload MSIX
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $tagName = if ("${{ github.event_name }}" -eq "push") { "${{ github.ref_name }}" } else { "v$version" }
        $msixPath = "${{ steps.find_msix.outputs.msix_path }}"
        
        $releaseBody = @"
         ## HP Gaming Hub v$version
         
         ### Installation
         1. Download both the MSIX package and the HPGamingHub.pfx certificate file
         2. Right-click on HPGamingHub.pfx and select "Install PFX"
         3. Choose "Current User" and click Next
         4. Leave password field empty and click Next
         5. Select "Place all certificates in the following store" and browse to "Trusted Root Certification Authorities"
         6. Click Next and Finish
         7. Now you can install the MSIX package without certificate errors
         
         ### Changes
         - See commit history for detailed changes
         
         ### System Requirements
         - Windows 10/11 (x64)
         - .NET 8.0 Runtime
         - HP OMEN/Pavilion/Victus gaming hardware
         "@
        
        # Create release using GitHub CLI
         gh release create "$tagName" "$msixPath" "HPGamingHub.pfx" --title "HP Gaming Hub v$version" --notes "$releaseBody" --repo "${{ github.repository }}"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: msix-package-v${{ steps.get_version.outputs.version }}
        path: ${{ steps.find_msix.outputs.msix_path }}
        retention-days: 30